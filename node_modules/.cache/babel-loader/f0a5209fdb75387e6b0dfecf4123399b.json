{"ast":null,"code":"var _jsxFileName = \"/Users/thanhvan/REACTJS/project-food/src/components/Meals/AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/Mealitem';\nimport classes from './AvailableMeals.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n  useEffect(() => {\n    const fetchMeals = async () => {\n      let response = await fetch('http://localhost:4000/meal');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const responseData = await response.json(); // const loadedMeals = [];\n      // for (const key in responseData){\n      //   loadedMeals.push({\n      //     id: key,\n      //     name: responseData[key].name,\n      //     description: responseData[key].description, \n      //     price: responseData[key].price,\n      //   })\n      // }\n      // setMeals(loadedMeals);\n\n      setMeals(responseData);\n      setIsLoading(false);\n    }; // try{\n    //   fetchMeals();\n    // }\n    // catch(error){\n    //   setIsLoading(false);\n    //   setHttpError(error.message);\n    // }\n\n\n    fetchMeals().catch(error => {\n      setIsLoading(false);\n      setIsLoading(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"GNhuq97CrYTRGtb4EdV+fANyLyQ=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["/Users/thanhvan/REACTJS/project-food/src/components/Meals/AvailableMeals.js"],"names":["useEffect","useState","Card","MealItem","classes","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","ok","Error","responseData","json","catch","error","message","MealsLoading","mealsList","map","meal","id","name","description","price"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;;;AAGA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,UAAU,GAAG,YAAY;AAE7B,UAAKC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAAD,CAA3B;;AACA,UAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,YAAMC,YAAY,GAAI,MAAMJ,QAAQ,CAACK,IAAT,EAA5B,CAN6B,CAW7B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAX,MAAAA,QAAQ,CAACU,YAAD,CAAR;AAEAR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAED,KA1BD,CADc,CA4Bd;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACAG,IAAAA,UAAU,GAAGO,KAAb,CAAoBC,KAAD,IAAU;AAC3BX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAA,MAAAA,YAAY,CAACW,KAAK,CAACC,OAAP,CAAZ;AACD,KAHD;AAQD,GA7CQ,EA6CN,EA7CM,CAAT;;AA+CA,MAAGb,SAAH,EAAa;AACX,wBACE;AAAS,MAAA,SAAS,EAAEJ,OAAO,CAACkB,YAA5B;AAAA,6BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AACD,MAAGZ,SAAH,EAAc;AACZ,wBACE;AAAS,MAAA,SAAS,EAAEN,OAAO,CAACkB,YAA5B;AAAA,6BAEA;AAAA,kBAAIZ;AAAJ;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAMD,QAAMa,SAAS,GAAGjB,KAAK,CAACkB,GAAN,CAAWC,IAAD,iBAC1B,QAAC,QAAD;AAEE,IAAA,EAAE,EAAEA,IAAI,CAACC,EAFX;AAGE,IAAA,IAAI,EAAED,IAAI,CAACE,IAHb;AAIE,IAAA,WAAW,EAAEF,IAAI,CAACG,WAJpB;AAKE,IAAA,KAAK,EAAEH,IAAI,CAACI;AALd,KACOJ,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,UADgB,CAAlB;AAWA,sBACE;AAAS,IAAA,SAAS,EAAEtB,OAAO,CAACE,KAA5B;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE;AAAA,kBAAKiB;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAhGD;;GAAMlB,c;;KAAAA,c;AAkGN,eAAeA,cAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/Mealitem';\nimport classes from './AvailableMeals.module.css';\n\n\nconst AvailableMeals = () => {\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n     \n      let  response = await fetch('http://localhost:4000/meal');\n      if(!response.ok){\n        throw new Error('Something went wrong!');\n      }\n      const responseData =  await response.json();\n      \n      \n      \n\n      // const loadedMeals = [];\n      // for (const key in responseData){\n      //   loadedMeals.push({\n      //     id: key,\n      //     name: responseData[key].name,\n      //     description: responseData[key].description, \n      //     price: responseData[key].price,\n\n      //   })\n      // }\n      // setMeals(loadedMeals);\n      setMeals(responseData)\n      \n      setIsLoading(false);\n\n    };\n    // try{\n    //   fetchMeals();\n\n    // }\n    // catch(error){\n    //   setIsLoading(false);\n    //   setHttpError(error.message);\n\n    // }\n    fetchMeals().catch((error) =>{\n      setIsLoading(false);\n      setIsLoading(error.message);\n    })\n\n    \n    \n   \n  }, []);\n\n  if(isLoading){\n    return (\n      <section className={classes.MealsLoading}>\n      <p>Loading....</p>\n\n    </section>\n    )\n    \n  }\n  if(httpError) {\n    return (\n      <section className={classes.MealsLoading}>\n\n      <p>{httpError}</p>\n\n    </section>\n    )\n  }\n\n\n\n\n\n  const mealsList = meals.map((meal) => (\n    <MealItem\n      key={meal.id}\n      id={meal.id}\n      name={meal.name}\n      description={meal.description}\n      price={meal.price}\n    />\n  ));\n\n\n  return (\n    <section className={classes.meals}>\n      <Card>\n        <ul>{mealsList}</ul>\n  \n\n      </Card>\n    </section>\n  );\n};\n\nexport default AvailableMeals;"]},"metadata":{},"sourceType":"module"}